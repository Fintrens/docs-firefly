name: Build & Deploy

on:
  push:
    branches: [ master, dev ]   # master → prod, dev → qa
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docs
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node 16.16.0
        uses: actions/setup-node@v4
        with:
          node-version: '16.16.0'
          cache: npm
          cache-dependency-path: docs/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Build (prod)
        run: npm run build

      # Stage deploy assets (only the backup script)
      - name: Collect deploy assets
        working-directory: .
        run: |
          mkdir -p deploy-assets
          cp script/remote-backup.sh deploy-assets/

      # Artifacts for deploy job
      - name: Upload site-dist
        uses: actions/upload-artifact@v4
        with:
          name: site-dist
          path: docs/src/.vuepress/dist
          if-no-files-found: error
          retention-days: 3

      - name: Upload deploy-assets
        uses: actions/upload-artifact@v4
        with:
          name: deploy-assets
          path: deploy-assets
          if-no-files-found: error
          retention-days: 3

  deploy:
    needs: build
    if: ${{ github.ref_name == 'master' || github.ref_name == 'dev' }}
    runs-on: ubuntu-latest

    # Optional: keep environments if you use them
    environment:
      name: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}

    steps:
      # Download artifacts
      - name: Download site-dist
        uses: actions/download-artifact@v4
        with:
          name: site-dist
          path: dist

      - name: Download deploy-assets
        uses: actions/download-artifact@v4
        with:
          name: deploy-assets
          path: deploy-assets

      # SSH setup
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust server host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H -p "${{ secrets.SSH_PORT || '22' }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      # 1) BACKUP current ${{ vars.REMOTE_PATH }}
      - name: Upload remote-backup.sh
        run: scp -P "${{ secrets.SSH_PORT || '22' }}" deploy-assets/remote-backup.sh \
             "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/remote-backup.sh"

      - name: Run remote-backup.sh
        run: |
          ssh -p "${{ secrets.SSH_PORT || '22' }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "chmod +x /tmp/remote-backup.sh && /tmp/remote-backup.sh '${{ vars.REMOTE_PATH }}'"

      # 2) UPLOAD DIST → ${{ vars.REMOTE_PATH }}
      - name: Ensure remote dir exists
        run: ssh -p "${{ secrets.SSH_PORT || '22' }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
               "mkdir -p '${{ vars.REMOTE_PATH }}'"

      - name: Upload site (dist → REMOTE_PATH)
        run: |
          rsync -rltvz --delete-delay \
            -e "ssh -p ${{ secrets.SSH_PORT || '22' }}" \
            dist/ "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ vars.REMOTE_PATH }}/"

      # 3) Reload nginx (no config change)
      - name: Reload nginx
        run: |
          ssh -p "${{ secrets.SSH_PORT || '22' }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "sudo systemctl reload nginx || sudo systemctl restart nginx"
