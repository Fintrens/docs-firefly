name: Build & Deploy

on:
  push:
    branches: [ master, dev ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docs

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 16.16.0
        uses: actions/setup-node@v4
        with:
          node-version: '16.16.0'
          cache: npm
          cache-dependency-path: docs/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Build (prod)
        run: npm run build

      # Stage deploy assets (only the backup script)
      - name: Collect deploy assets
        working-directory: .
        run: |
          mkdir -p deploy-assets
          cp script/remote-backup.sh deploy-assets/

      # Artifacts for deploy job
      - name: Upload site-dist
        uses: actions/upload-artifact@v4
        with:
          name: site-dist
          path: docs/src/.vuepress/dist
          if-no-files-found: error
          retention-days: 3

  deploy:
    needs: build
    if: ${{ github.ref_name == 'master' || github.ref_name == 'dev' }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}

    steps:
      - name: Checkout (for scripts)
        uses: actions/checkout@v4

      - name: Download site-dist
        uses: actions/download-artifact@v4
        with:
          name: site-dist
          path: dist

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust server host key
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          ssh-keyscan -H -p "${{ secrets.SSH_PORT || '22' }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      # 1) BACKUP current ${{ vars.REMOTE_PATH }}
      - name: Upload remote-backup.sh
        run: |
          set -euo pipefail
          scp -P "${{ secrets.SSH_PORT || '22' }}" -v \
            script/remote-backup.sh \
            "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/remote-backup.sh" \
            |& tee -a "$RUNNER_TEMP/scp_upload_backup.log"

      - name: Run remote-backup.sh
        run: |
          set -euo pipefail
          ssh -p "${{ secrets.SSH_PORT || '22' }}" -vvv -o LogLevel=DEBUG3 \
              -E "$RUNNER_TEMP/ssh_run_backup.log" \
              "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
              "chmod +x ~/remote-backup.sh && ~/remote-backup.sh '${{ vars.REMOTE_PATH }}'"
          echo "::group::ssh_run_backup.log"
          cat "$RUNNER_TEMP/ssh_run_backup.log" || true
          echo "::endgroup::"

      # 2) UPLOAD DIST → ${{ vars.REMOTE_PATH }}
      - name: Ensure remote dir exists
        run: |
          set -euo pipefail
          ssh -p "${{ secrets.SSH_PORT || '22' }}" -vvv -o LogLevel=DEBUG3 \
              -E "$RUNNER_TEMP/ssh_mkdir.log" \
              "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
              "mkdir -p '${{ vars.REMOTE_PATH }}' && ls -ld '${{ vars.REMOTE_PATH }}' || true"
          echo "::group::ssh_mkdir.log"
          cat "$RUNNER_TEMP/ssh_mkdir.log" || true
          echo "::endgroup::"

      - name: Upload site (dist → REMOTE_PATH)
        run: |
          set -euo pipefail
          rsync -rltvz -vv --progress \
            -e "ssh -p ${{ secrets.SSH_PORT || '22' }} -vvv -o LogLevel=DEBUG3" \
            dist/ "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ vars.REMOTE_PATH }}/" \
            |& tee -a "$RUNNER_TEMP/rsync_upload.log"

      # 3) Reload nginx (no config change)
      - name: Reload nginx
        run: |
          set -euo pipefail
          ssh -p "${{ secrets.SSH_PORT || '22' }}" -vvv -o LogLevel=DEBUG3 \
              -E "$RUNNER_TEMP/ssh_nginx.log" \
              "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
              "sudo systemctl reload nginx || sudo systemctl restart nginx; sudo systemctl status nginx --no-pager || systemctl status nginx --no-pager || true"
          echo "::group::ssh_nginx.log"
          cat "$RUNNER_TEMP/ssh_nginx.log" || true
          echo "::endgroup::"

      # Always upload logs too (downloadable)
      - name: Upload SSH/SCP/rsync logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-debug-logs
          path: |
            ${{ runner.temp }}/scp_upload_backup.log
            ${{ runner.temp }}/ssh_run_backup.log
            ${{ runner.temp }}/ssh_mkdir.log
            ${{ runner.temp }}/rsync_upload.log
            ${{ runner.temp }}/ssh_nginx.log
          if-no-files-found: ignore
          retention-days: 7
